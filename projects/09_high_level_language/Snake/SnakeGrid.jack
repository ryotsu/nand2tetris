class SnakeGrid {
    field SnakeGame game;
    field int sizeX, sizeY;
    field int foodX, foodY;
    field Array grid;

    constructor SnakeGrid new(SnakeGame Agame, int Ax, int Ay) {
        let game = Agame;
        let sizeX = Ax / 4;
        let sizeY = (Ay-16) / 4;

        do initGrid();

        return this;
    }

    method void dispose() {
        var int curX;
        var Array xGrid;

        let curX = 0;
        while( curX < sizeX ) {
            let xGrid = grid[curX];
            do xGrid.dispose();
            let curX = curX + 1;
        }

        do Memory.deAlloc(this);

        return;
    }

    method void placeFood() {
        var boolean found;
        var int randX, randY;

        let found = false;
        while( ~found ) {
            let randX = Random.randRange(sizeX);
            let randY = Random.randRange(sizeY);
            if( ~ checkOccupied(randX, randY) ) {
                let found = true;
            }

        }

        let foodX = randX;
        let foodY = randY;

        return;
    }

    method void drawFood() {
        do Screen.setColor(true);
        do Screen.drawCircle((foodX*4)+2, (foodY*4)+2, 2);

        return;
    }

    method void initGrid() {
        var int curX, curY;
        var Array xGrid;

        let grid = Array.new(sizeX);
        let curX = 0;

        while( curX < sizeX ) {
            let xGrid = Array.new(sizeY);
            let curY = 0;
            while( curY < sizeY ) {
                let xGrid[curY] = false;
                let curY = curY + 1;
            }
            let grid[curX] = xGrid;
            let curX = curX + 1;
        }

        do Screen.setColor(true);
        do Screen.drawLine(0, (sizeY*4)+1, (sizeX*4-1), (sizeY*4)+1);

        return;
    }

    method int sizeX() {
        return sizeX;
    }

    method int sizeY() {
        return sizeY;
    }

    method int foodX() {
        return foodX;
    }

    method int foodY() {
        return foodY;
    }

    method void setOccupied(int x, int y, boolean occupied) {
        var Array xGrid;
        let xGrid = grid[x];
        let xGrid[y] = occupied;
        return;
    }

    method boolean checkOccupied(int x, int y) {
        var Array xGrid;
        let xGrid = grid[x];
        if( xGrid[y] ) {
            return true;
        } else {
            return false;
        }
    }

    method boolean checkFood(int x, int y) {
        if( x = foodX ) {
            if( y = foodY ) {
                return true;
            }
        }

        return false;
    }

    method void debugPosition(int x, int y) {
        do Output.moveCursor(22, 21);
        do Output.printInt(game.getCycle());
        do Output.moveCursor(22, 42);
        do Output.printInt(x);
        do Output.moveCursor(22, 46);
        do Output.printInt(y);
        return;
    }

    method void drawSnakeBit(int x, int y) {
        do Screen.setColor(true);
        do Screen.drawRectangle( x*4, y*4, (x*4)+4, (y*4)+4 );
        do setOccupied(x, y, true);
        return;
    }

    method void clearSnakeBit(int x, int y) {
        do Screen.setColor(false);
        do Screen.drawRectangle( x*4, y*4, (x*4)+4, (y*4)+4 );
        do setOccupied(x, y, false);
        return;
    }

    method void drawStatus() {
        var Snake snake;
        var String tString;

        do Output.moveCursor(22, 0);
        let tString = "Level: ";
        do Output.printString(tString);
        do tString.dispose();
        do Output.printInt(game.getLevel());
        do Output.moveCursor(22, 25);
        let tString = "Score: ";
        do Output.printString(tString);
        do tString.dispose();
        do Output.printInt(game.getScore());
        do Output.moveCursor(22, 52);
        let tString = "Length: ";
        do Output.printString(tString);
        do tString.dispose();
        let snake = game.getSnake();
        do Output.printInt(snake.getLength());
        if(game.getPaused()) {
            do drawPaused();
        } else {
            do clearPaused();
        }

        return;
    }

    method void drawPaused() {
        var String tString;

        do Output.moveCursor(22, 12);
        let tString = "[PAUSED] ";
        do Output.printString(tString);
        do tString.dispose();
        return;
    }

    method void clearPaused() {
        var String tString;

        do Output.moveCursor(22, 12);
        let tString = "         ";
        do Output.printString(tString);
        do tString.dispose();

        return;
    }

    method void drawDone() {
        var String tString;

        do Output.moveCursor(22, 12);
        let tString = " [DONE]  ";
        do Output.printString(tString);
        do tString.dispose();

        return;
    }

    method void drawCrashed() {
        var String tString;

        do Output.moveCursor(22, 12);
        let tString = "*CRASHED*";
        do Output.printString(tString);
        do tString.dispose();

        return;
    }
}
